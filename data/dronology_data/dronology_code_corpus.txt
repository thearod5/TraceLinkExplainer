Command sent to the GCS for adjusting the monitoring frequency. The frequency is sent in ms.Command sent to the GCS for adjusting the state frequency. The frequency is sent in ms.This class defines the bar overlaid on the map that signals when a route is in edit mode.
Called when the save button on the edit bar is clicked. It exits edit mode, sends the points to dronology, and uses stored points to display the correct waypoints on the map.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.Service for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.
The singleton ConfigurationService instanceMonitoring message received from the GCS for a specific UAV.Holds a fleet of virtual or physical drones. When activated, UAVs are registered with the fleet manager and can be retrieved for assigning routes to them.
Specifies whether virtual or physical drones will be created according to the previously specified runtime drone type.
Checks for an available drone from the fleet. true if drone is available, false if it is not.
Returns the next available drone. Currently uses FIFO to recycle drones.
When a drone completes a mission, returns it to the pool of available drones. droneEstablishes new, and handles established connections between Dronology and multiple GCS. Creates new and threads when a connection to a new GCS is established.The handles both incoming and outgoing queues. Incoming queues contain received from the UAV to be dispatched to the . The outgoing queue contains s being sent to the UAV.Threat handling incoming messages from a GCS. The can handle json messages that are transformed into UAV Messages by the .The singleton ConfigurationService instanceCommand sent to the GCS for taking off to a given alitude. The altitude is specified in meter.Command sent to the GCS for setting a velocity vector to the UAV. The vector is specified in NED .Command sent to the GCS for setting the groundspeed of the UAV. Ground speed is specified in m s.Command sent to the GCS for sending a new waypoint.Ids for valid UAV commandsCommand sent to the GCS for stopping immediately and remain hovering in place.Command sent to the GCS for sending a new waypoint.Interface for all UAV commands.Command sent to the GCS for setting the groundspeed of the UAV. Ground speed is specified in m s.Command sent to the GCS for setting a velocity vector to the UAV. The vector is specified in NED .Command sent to the GCS for taking off to a given alitude. The altitude is specified in meter.Abstract base class for all commands sent to the GCS. Contains the id of the UAV and a unique command id.Command sent to the GCS for adjusting the state frequency. The frequency is sent in ms.Command sent to the GCS for adjusting the monitoring frequency. The frequency is sent in ms.Factory class for creating from JSON strings.State message received from the GCS for a specific UAV.Factory class for creating from JSON strings.Monitoring message received from the GCS for a specific UAV.Abstract factory class for drone fleet factory Jane
Returns list of drones array list of iDrones DroneExceptionFactory class for initializing a new instance. HuangFactory class for initializing a new instance. HuangThe handles both incoming and outgoing queues. Incoming queues contain received from the UAV to be dispatched to the . The outgoing queue contains s being sent to the UAV.Service for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.
The singleton ConfigurationService instanceService instance for handling UAVs See for details.Threat handling incoming messages from a GCS. The can handle json messages that are transformed into UAV Messages by the .Establishes new, and handles established connections between Dronology and multiple GCS. Creates new and threads when a connection to a new GCS is established.Establishes new, and handles established connections between Dronology and multiple GCS. Creates new and threads when a connection to a new GCS is established.When a new GCS connects to Dronology it sends a .This is a SINGLETON class. To get an instance call getInstance Sets the runtime mode of FlightZone either as SIMULATION or PHYSICAL The mode may only be set one time during execution. Simulation uses soft drone objects. Physical uses real drones controlled using Dronekit API. Huang
Sets flightmode to SIMULATION. Does not allow the flight mode to be reset after it is initially set. FlightZoneException
Sets flightmode to PHYSICAL Does not allow the flight mode to be reset after it is initially set. FlightZoneException
true if in SIMULATION mode. False otherwise.
true if in PHYSICAL mode. False otherwise.Establishes new, and handles established connections between Dronology and multiple GCS. Creates new and threads when a connection to a new GCS is established.The listens on a predefined port for new connections from GCS.The listens on a predefined port for new connections from GCS.A structured Identifier. Each object holds an id part and refers to child IDs which in turn hold again one id part, etc, which altogether form the whole identifier.
ids The ids that will be mapped to root and child ArtifactIdentifier
The id of the parent ArtifactIdentifier
The child ArtifactIdentifier
Returns all artifact identifier concatenatedInterface for all messages that shall be subscribeable via the monitoring API.Base class for all monitorable messages.Service for UAV monitoring messages Allows registering to subscribe to certain message types or topics
The singleton DroneMonitoringService instanceRemote facade for monitoring UAVs Allows registering to subscribe to certain message types or topicsService for UAV monitoring messages Allows registering to subscribe to certain message types or topics
The singleton DroneMonitoringService instanceRemote facade for monitoring UAVs Allows registering to subscribe to certain message types or topicsService for UAV monitoring messages Allows registering to subscribe to certain message types or topics
The singleton DroneMonitoringService instanceRemote facade for monitoring UAVs Allows registering to subscribe to certain message types or topicsThis is the bar that indicates when the active flights UI is in follow modeThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the bar that indicates when the active flights UI is in follow modeThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the set of emergency buttons in the AFInfoPanelThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleUtility class for drawing marker and UAV icons on the map NEEDS ADDITIONAL CLEANUP REFACTORING
This function gets the flight routes from dronology core and draws them on the map. focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
updates the flight routes. Deletes old ones, adds new ones, and redraws the lines to different colors as each waypoint is reached focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
if flightRoutes.size e wayPointMarkers wayPointMarkers.clear flightRoutes.clear
This function updates the position of the drone icons on the map focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
This function adds icons on the map that represent each drone s position. focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
assists in the logic of updating flight routes coordinates iThis is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutUtility class for drawing marker and UAV icons on the map NEEDS ADDITIONAL CLEANUP REFACTORING
This function gets the flight routes from dronology core and draws them on the map. focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
updates the flight routes. Deletes old ones, adds new ones, and redraws the lines to different colors as each waypoint is reached focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
if flightRoutes.size e wayPointMarkers wayPointMarkers.clear flightRoutes.clear
This function updates the position of the drone icons on the map focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
This function adds icons on the map that represent each drone s position. focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
assists in the logic of updating flight routes coordinates iThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutUtility class for drawing marker and UAV icons on the map NEEDS ADDITIONAL CLEANUP REFACTORING
This function gets the flight routes from dronology core and draws them on the map. focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
updates the flight routes. Deletes old ones, adds new ones, and redraws the lines to different colors as each waypoint is reached focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
if flightRoutes.size e wayPointMarkers wayPointMarkers.clear flightRoutes.clear
This function updates the position of the drone icons on the map focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
This function adds icons on the map that represent each drone s position. focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
assists in the logic of updating flight routes coordinates iThis is the main layout for the Active Flights UI
determines if the map should continue in follow modeThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutFactory for creating the layers of the OpenStreetMap Leaflet Map.This is the side panel that contains the AFInfoBoxes with the UAV information
Adds a box to the panel isChecked name status batteryLife healthColor lat lon alt speed hoverInPlace
Removes a box from the panel name the name ID of the drone returns true if successful. returns false if failed
a list of all drones that have their checkbox checked
true if all the drones are checked
true if all drones are not checked
Expands or collapses all the boxes visible
true if all boxes are expanded
true if all boxes are collapsed
gets updated information from dronology about the UAV s location information and status. adds any new drones to the panel and removes any drones that were deactivated
add new drones to the panel
delete old drones from the panel
update current drones statusThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis is the side panel that contains the AFInfoBoxes with the UAV information
Adds a box to the panel isChecked name status batteryLife healthColor lat lon alt speed hoverInPlace
Removes a box from the panel name the name ID of the drone returns true if successful. returns false if failed
a list of all drones that have their checkbox checked
true if all the drones are checked
true if all drones are not checked
Expands or collapses all the boxes visible
true if all boxes are expanded
true if all boxes are collapsed
gets updated information from dronology about the UAV s location information and status. adds any new drones to the panel and removes any drones that were deactivated
add new drones to the panel
delete old drones from the panel
update current drones statusThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutService for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.
The singleton ConfigurationService instanceThis class defines the window that asks the user if they want to delete a specified route.Utility class for drawing marker and UAV icons on the map NEEDS ADDITIONAL CLEANUP REFACTORING
This function gets the flight routes from dronology core and draws them on the map. focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
updates the flight routes. Deletes old ones, adds new ones, and redraws the lines to different colors as each waypoint is reached focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
if flightRoutes.size e wayPointMarkers wayPointMarkers.clear flightRoutes.clear
This function updates the position of the drone icons on the map focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
This function adds icons on the map that represent each drone s position. focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
assists in the logic of updating flight routes coordinates iThis is the main layout for the Flight Routes UI.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the class that contains all logic for displaying the latitude and longitude locations of the pins on the map. There is code in its constructor that ensures the values input into the table are usable. It contains functions that cause the grid to enter and exit edit mode, functions to add and delete a column of Delete buttons, and it contains a grid that displays information about waypoints.This class defines the bar overlaid on the map that signals when a route is in edit mode.
Called when the save button on the edit bar is clicked. It exits edit mode, sends the points to dronology, and uses stored points to display the correct waypoints on the map.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the info bar above the map that gives route information and contains the edit and delete buttons. jhollanThis is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the drag and drop vertical layout in which the FRInfoBoxes are stored in the assign routes UI.
list of pending plans for the UAVThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the drag and drop vertical layout in which the FRInfoBoxes are stored in the assign routes UI.
list of pending plans for the UAVThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the drag and drop vertical layout in which the FRInfoBoxes are stored in the assign routes UI.
list of pending plans for the UAVThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexRemote facade for handling UAVs. Initial implementation of mission planning capabilities. Allows retrieving sending a mission plan as JSON String to Dronology.Services for planning and executing missions for multiple UAVs . Initial implementation of mission planning capabilities. Allows retrieving sending a mission plan as JSON String to Dronology.
The singleton ConfigurationService instanceService for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceAbstract base class for all services that can handle files. The service instance. The type of file that is supported.Remote facade for handling UAV routes Allows creating and modifying routes.Service for handling flight routes. Allows creating new routes, retrieving existing routus, and transmitting modified routes.
The singleton ConfigurationService instanceThe provides capabilities for retrieving from the file system. When a new is detected in the file system it gets automatically loaded. Routes are provided via proxies containing, basic info on the flight route.Abstract base class for all services that can handle files. The service instance. The type of file that is supported.Remote facade for handling UAV routes Allows creating and modifying routes.Service for handling flight routes. Allows creating new routes, retrieving existing routus, and transmitting modified routes.
The singleton ConfigurationService instanceThe provides capabilities for retrieving from the file system. When a new is detected in the file system it gets automatically loaded. Routes are provided via proxies containing, basic info on the flight route.Remote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceRemote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceRemote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceAbstract base class for all services that can handle files. The service instance. The type of file that is supported.Service for handling flight routes. Allows creating new routes, retrieving existing routus, and transmitting modified routes.
The singleton ConfigurationService instanceRemote Interface for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.Service for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.
The singleton ConfigurationService instanceService instance for handling UAVs See for details.Remote facade for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.Threat handling incoming messages from a GCS. The can handle json messages that are transformed into UAV Messages by the .Threat handling incoming messages from a GCS. The can handle json messages that are transformed into UAV Messages by the .Establishes new, and handles established connections between Dronology and multiple GCS. Creates new and threads when a connection to a new GCS is established.Establishes new, and handles established connections between Dronology and multiple GCS. Creates new and threads when a connection to a new GCS is established.Associates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangEstablishes new, and handles established connections between Dronology and multiple GCS. Creates new and threads when a connection to a new GCS is established.The handles both incoming and outgoing queues. Incoming queues contain received from the UAV to be dispatched to the . The outgoing queue contains s being sent to the UAV.Writer Thread takes items from the outbound queue and writes it to the socket.Stores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangThe manages pending, executing, and completed plans for a single UAV.The manages pending, executing, and completed plans for a single UAV.Voltage simulator. For every minute of flight, the battery decreases by . volts. HuangRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameUses the bisection method to iteratively hone in on the nvector that is metersToTravel distance away from the current n vector along the path that goes from current to target. A path can be thought of as the set of NVectors you can create by interpolating between current and target. This code takes advantage of this to find the NVector on this path that is the right distance away from the current distance. current drone current position target drone target position metersToTravel the distance the drone should travel along the path from current to target the nvector taht is meters distance away from current along the path that goes from current to targetUses the bisection method to iteratively hone in on the nvector that is metersToTravel distance away from the current n vector along the path that goes from current to target. A path can be thought of as the set of NVectors you can create by interpolating between current and target. This code takes advantage of this to find the NVector on this path that is the right distance away from the current distance. current drone current position target drone target position metersToTravel the distance the drone should travel along the path from current to target the nvector taht is meters distance away from current along the path that goes from current to targetRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameVoltage simulator. For every minute of flight, the battery decreases by . volts. HuangRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameComputes the current position of a virtual drone as it moves during flight. Serves as a lightweight SITL for a drone. Huang
Creates a flight simulator object for a single virtual drone drone
Sets current flight path from current position to a targeted position currentPos Coordinates of current position targetPos Coordinates of target position
Computes the distance between current position and target position distance remaining in degree points.
Computes the delta between the drones current latitude and its target latitude.
Computes the delta between the drones current longitude and its target longitude
Computes the angle at which a drone is flying with respect to the vertical
Computes the position of the drone following one step. Checks if destination has been reached. step Distance in degree points to move per iteration isStillMoving
Checks if a drone has reached its target destination. distanceMovedPerTimeStep Checks location with respect to target position. true if target position is reached.Simple simulator implementation containing a flight simulator and a battery simulator.Computes the current position of a virtual drone as it moves during flight. Serves as a lightweight SITL for a drone. Huang
Creates a flight simulator object for a single virtual drone drone
Sets current flight path from current position to a targeted position currentPos Coordinates of current position targetPos Coordinates of target position
Computes the distance between current position and target position distance remaining in degree points.
Computes the delta between the drones current latitude and its target latitude.
Computes the delta between the drones current longitude and its target longitude
Computes the angle at which a drone is flying with respect to the vertical
Computes the position of the drone following one step. Checks if destination has been reached. step Distance in degree points to move per iteration isStillMoving
Checks if a drone has reached its target destination. distanceMovedPerTimeStep Checks location with respect to target position. true if target position is reached.Simple simulator implementation containing a flight simulator and a battery simulator.Representation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameConfiguration Parameter for Dronology.
The maximum number of individual uav threads i.e., the maximum number of uavs handled by dronology.
The speed with which the drone returns to its home location once the return to home command is issued. If set to , the uav uses its last known speed as the return to home speed.
The safety zone of the uav in m which is used for determining whether a uav is allowed to take off.
The takeoff altitude of the uav .
The distance to the waypoint in m in which the waypoint is considered reached.
The distance to the altitude in m in which the takeoff height reached.
Altitude used for the last waypoint when issuing a return to home command before initiating the landing procedure.
max. ft AGL m
Frequency the status check timer is executed
Frequency the collision avoidance check timer is executedHolds a fleet of virtual or physical drones. When activated, UAVs are registered with the fleet manager and can be retrieved for assigning routes to them.
Specifies whether virtual or physical drones will be created according to the previously specified runtime drone type.
Checks for an available drone from the fleet. true if drone is available, false if it is not.
Returns the next available drone. Currently uses FIFO to recycle drones.
When a drone completes a mission, returns it to the pool of available drones. droneManagement of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Holds a fleet of virtual or physical drones. When activated, UAVs are registered with the fleet manager and can be retrieved for assigning routes to them.
Specifies whether virtual or physical drones will be created according to the previously specified runtime drone type.
Checks for an available drone from the fleet. true if drone is available, false if it is not.
Returns the next available drone. Currently uses FIFO to recycle drones.
When a drone completes a mission, returns it to the pool of available drones. droneFactory class for initializing a new instance. HuangFactory class for initializing a new instance. HuangHolds a fleet of virtual or physical drones. When activated, UAVs are registered with the fleet manager and can be retrieved for assigning routes to them.
Specifies whether virtual or physical drones will be created according to the previously specified runtime drone type.
Checks for an available drone from the fleet. true if drone is available, false if it is not.
Returns the next available drone. Currently uses FIFO to recycle drones.
When a drone completes a mission, returns it to the pool of available drones. droneFactory class for initializing a new instance. HuangFactory class for initializing a new instance. HuangCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionAssociates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionAssociates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionAssociates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusFactory class for initializing a new instance. HuangRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameFactory class for initializing a new instance. HuangFactory class for initializing a new instance. HuangRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangFactory class for initializing a new instance. HuangAbstract Base class for both virtual and physical drones Michael
Set base coordinates for the drone basePosition
Get unique base coordinates for the drone base coordinatesRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameFactory class for initializing a new instance. HuangAbstract Base class for both virtual and physical drones Michael
Set base coordinates for the drone basePosition
Get unique base coordinates for the drone base coordinatesRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangThe manages pending, executing, and completed plans for a single UAV.Management of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.The manages pending, executing, and completed plans for a single UAV.Management of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.The manages pending, executing, and completed plans for a single UAV.Management of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.The manages pending, executing, and completed plans for a single UAV.Management of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Management of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Central management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionManagement of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Central management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionManagement of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Central management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionManages a mission plan. Each Mission plan has one FullMissionPlan instance, and one UAVMissionPlan instance for each UAV in the Mission plan. Each of the UAV s individual mission plans are composed of MissionTasks. Once the entire mission plan is loaded, a thread is created which checks each of the individual UAVMissionPlans to determine if they can start the next task. Huang
Constructs the CoordinatedMission instance. A mission consists of one or more UAVs, each of which has a set of assigned tasks and synchronization points. mission
Loads mission from JSON file. Currently hard coded. mission MissionExecutionException
Adds an additional UAV to the mission plan. Creates the UAVMissionTasks instance and passes it a reference to the synchPointMgr uavID the ID of the UAV MissionExecutionException
Assigns a task to a specific UAV uavID UAV Identifier task Task to perform taskID Task specifics MissionExecutionException
Build all synch points
Activates next task in each UAV mission, if there is no unfinished active task MissionExecutionException
Expands flight pattern tasks MissionExecutionExceptionCentral control class responsible for building, initializing, and executing a . The periodically checks for new tasks that can be activated and activates them on demand.
The singleton MissionController instancePredefined pattern for coordinated landing that is expanded as part of a in a .Synchronization IDs for predefined, built in .A represents a predefined pattern that is expanded when the mission is created.Predefined pattern for coordinated take off that is expanded as part of a in a .Synchronization IDs for predefined, built in .A represents a predefined pattern that is expanded when the mission is created.Base class for all predefined flight patterns that can be exandedInterface for all flight pattern implementations that can be expanded into several different .
Coordinates the flight of multiple UAVs across a potentially overlapping space consisting of a currentLocation and a targetLocation for each UAV. FOR NOW We assume that currentCoordinates and targetWayPoints for all UAVs are unique and sufficiently separated from each other. Paths to move from current to target positions may overlap. We should add this check in later on. uavMission The mission plan the pattern belongs to. currentLocation The current location from which the pattern starts. targetLocation The target location when the pattern is completed. MissionExecutionException
A containing the tasks part of that pattern.Factory class for predefined .
type The of the flight pattern to create. A flight pattern for the given pattern type. An in case the pattern is not supported.Contains a list of part mission. HuangManages a mission plan. Each Mission plan has one FullMissionPlan instance, and one UAVMissionPlan instance for each UAV in the Mission plan. Each of the UAV s individual mission plans are composed of MissionTasks. Once the entire mission plan is loaded, a thread is created which checks each of the individual UAVMissionPlans to determine if they can start the next task. Huang
Constructs the CoordinatedMission instance. A mission consists of one or more UAVs, each of which has a set of assigned tasks and synchronization points. mission
Loads mission from JSON file. Currently hard coded. mission MissionExecutionException
Adds an additional UAV to the mission plan. Creates the UAVMissionTasks instance and passes it a reference to the synchPointMgr uavID the ID of the UAV MissionExecutionException
Assigns a task to a specific UAV uavID UAV Identifier task Task to perform taskID Task specifics MissionExecutionException
Build all synch points
Activates next task in each UAV mission, if there is no unfinished active task MissionExecutionException
Expands flight pattern tasks MissionExecutionExceptiontask in a mission for a UAV.
The id of the UAV the task belongs to.
The name of the task.
The waypoint associated with the task.Simple JSON Reader that converts a json String into a object. HuangManages a mission plan. Each Mission plan has one FullMissionPlan instance, and one UAVMissionPlan instance for each UAV in the Mission plan. Each of the UAV s individual mission plans are composed of MissionTasks. Once the entire mission plan is loaded, a thread is created which checks each of the individual UAVMissionPlans to determine if they can start the next task. Huang
Constructs the CoordinatedMission instance. A mission consists of one or more UAVs, each of which has a set of assigned tasks and synchronization points. mission
Loads mission from JSON file. Currently hard coded. mission MissionExecutionException
Adds an additional UAV to the mission plan. Creates the UAVMissionTasks instance and passes it a reference to the synchPointMgr uavID the ID of the UAV MissionExecutionException
Assigns a task to a specific UAV uavID UAV Identifier task Task to perform taskID Task specifics MissionExecutionException
Build all synch points
Activates next task in each UAV mission, if there is no unfinished active task MissionExecutionException
Expands flight pattern tasks MissionExecutionExceptionThe holds a list of and ensures that a point is fully synced before allowing UAVs to proceed with the next task. HuangSynchronization Point for routes assigned to UAVs. Once a is by one UAV, all collaborators have to reach the sync point in order to proceed. HuangPossible state of a HuangManages a mission plan. Each Mission plan has one FullMissionPlan instance, and one UAVMissionPlan instance for each UAV in the Mission plan. Each of the UAV s individual mission plans are composed of MissionTasks. Once the entire mission plan is loaded, a thread is created which checks each of the individual UAVMissionPlans to determine if they can start the next task. Huang
Constructs the CoordinatedMission instance. A mission consists of one or more UAVs, each of which has a set of assigned tasks and synchronization points. mission
Loads mission from JSON file. Currently hard coded. mission MissionExecutionException
Adds an additional UAV to the mission plan. Creates the UAVMissionTasks instance and passes it a reference to the synchPointMgr uavID the ID of the UAV MissionExecutionException
Assigns a task to a specific UAV uavID UAV Identifier task Task to perform taskID Task specifics MissionExecutionException
Build all synch points
Activates next task in each UAV mission, if there is no unfinished active task MissionExecutionException
Expands flight pattern tasks MissionExecutionExceptionMission plan for an individual UAV. Part of a . Huang
Check if task if finished MissionExecutionException
Needs to actually activate the flight route. NOTE Needs to handle ROUTE, WAYPOINT, TAKEOFF, and LAND . Exception
Expand the task list with PATTERNS. Currently supports two different patterns SynchronizedTakeoff and SynchronizedLanding Assumptions SynchronizedTakeoff has a ROUTE definied immediately after. SynchronizedLanding has a ROUTE defined immediately prior. MissionExecutionExceptionRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameDirections for one flight containing multiple waypoints. Huang
Constructor managedDroneHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionA terrestrial position defined by latitude, longitude, and altitude
A terrestrial position defined by latitude, longitude, and altitude . latitude the angle north of the equator in degrees . Must be a value within this interval . Must be a value within this interval longitude altitude the distance above sea level in meters or more precisely the distance above the surface of the WGS reference ellipsoid. IllegalArgumentException when the latitude or longitude is outside the specified range
The altitude the distance above sea level or more precisely the distance above the surface of the WGS reference ellipsoid. For this project we need this distance in meters
The latitude angle. the angle north of the equator in degrees .
The longitude angle the angle east of the prime meridian in degrees
a terrestrial position defined by an N vector plus altitude
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.A terrestrial position defined by a normal vector and an altitude. An N vector is a normal Vector that points out from the surface of the WGS reference ellipsoid. The normal vector is combined with an altitude which represents the distance above the reference ellipsoid . The n vector and altitude together precisely define a position on Earth. The n vector should be a unit vector . The altitude should be in meters.
x the x component of the normal vector y the y component of the normal vector z the z component of the normal vector altitude the distance above the reference ellipsoid .
the distance above sea level in meters
the x component of the n vector
the y component of the n vector
the z component of the n vector
Finds the distance in meters from this NVector to another. This is the distance that a laser would travel. other the other position to find the position to. The distance from this position to the other in meters
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by a latitude, longitude, and altitude.A position on Earth, represented as an X, Y and Z coordinate in an Earth centered Earth fixed reference frame. The origin of this frame is at the center of mass of the Earth. The X axis points towards where the equator meets the prime meridean . The Z axis points towards the geographic north pole . The Y axis can be derived using right hand rule and points towards latitude , longitude . All units are in meters.
x the distance in meters along the axis that points from the center of mass of the Earth towards where the equator meets the prime meridean y the distance in meters along the axis that points from the center of mass of the Earth towards latitude , longitude z the distance in meters along the axis that points from the center of mass of the Earth towards the geographic north pole
the x
the y
the z
the n vector plus altitude for this position
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
the latitude, longitude, and altitude for this positionA terrestrial position defined by latitude, longitude, and altitude
A terrestrial position defined by latitude, longitude, and altitude . latitude the angle north of the equator in degrees . Must be a value within this interval . Must be a value within this interval longitude altitude the distance above sea level in meters or more precisely the distance above the surface of the WGS reference ellipsoid. IllegalArgumentException when the latitude or longitude is outside the specified range
The altitude the distance above sea level or more precisely the distance above the surface of the WGS reference ellipsoid. For this project we need this distance in meters
The latitude angle. the angle north of the equator in degrees .
The longitude angle the angle east of the prime meridian in degrees
a terrestrial position defined by an N vector plus altitude
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.A position on Earth, represented as an X, Y and Z coordinate in an Earth centered Earth fixed reference frame. The origin of this frame is at the center of mass of the Earth. The X axis points towards where the equator meets the prime meridean . The Z axis points towards the geographic north pole . The Y axis can be derived using right hand rule and points towards latitude , longitude . All units are in meters.
x the distance in meters along the axis that points from the center of mass of the Earth towards where the equator meets the prime meridean y the distance in meters along the axis that points from the center of mass of the Earth towards latitude , longitude z the distance in meters along the axis that points from the center of mass of the Earth towards the geographic north pole
the x
the y
the z
the n vector plus altitude for this position
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
the latitude, longitude, and altitude for this positionA terrestrial position defined by latitude, longitude, and altitude
A terrestrial position defined by latitude, longitude, and altitude . latitude the angle north of the equator in degrees . Must be a value within this interval . Must be a value within this interval longitude altitude the distance above sea level in meters or more precisely the distance above the surface of the WGS reference ellipsoid. IllegalArgumentException when the latitude or longitude is outside the specified range
The altitude the distance above sea level or more precisely the distance above the surface of the WGS reference ellipsoid. For this project we need this distance in meters
The latitude angle. the angle north of the equator in degrees .
The longitude angle the angle east of the prime meridian in degrees
a terrestrial position defined by an N vector plus altitude
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.A terrestrial position defined by a normal vector and an altitude. An N vector is a normal Vector that points out from the surface of the WGS reference ellipsoid. The normal vector is combined with an altitude which represents the distance above the reference ellipsoid . The n vector and altitude together precisely define a position on Earth. The n vector should be a unit vector . The altitude should be in meters.
x the x component of the normal vector y the y component of the normal vector z the z component of the normal vector altitude the distance above the reference ellipsoid .
the distance above sea level in meters
the x component of the n vector
the y component of the n vector
the z component of the n vector
Finds the distance in meters from this NVector to another. This is the distance that a laser would travel. other the other position to find the position to. The distance from this position to the other in meters
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by a latitude, longitude, and altitude.A terrestrial position defined by latitude, longitude, and altitude
A terrestrial position defined by latitude, longitude, and altitude . latitude the angle north of the equator in degrees . Must be a value within this interval . Must be a value within this interval longitude altitude the distance above sea level in meters or more precisely the distance above the surface of the WGS reference ellipsoid. IllegalArgumentException when the latitude or longitude is outside the specified range
The altitude the distance above sea level or more precisely the distance above the surface of the WGS reference ellipsoid. For this project we need this distance in meters
The latitude angle. the angle north of the equator in degrees .
The longitude angle the angle east of the prime meridian in degrees
a terrestrial position defined by an N vector plus altitude
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.A position on Earth, represented as an X, Y and Z coordinate in an Earth centered Earth fixed reference frame. The origin of this frame is at the center of mass of the Earth. The X axis points towards where the equator meets the prime meridean . The Z axis points towards the geographic north pole . The Y axis can be derived using right hand rule and points towards latitude , longitude . All units are in meters.
x the distance in meters along the axis that points from the center of mass of the Earth towards where the equator meets the prime meridean y the distance in meters along the axis that points from the center of mass of the Earth towards latitude , longitude z the distance in meters along the axis that points from the center of mass of the Earth towards the geographic north pole
the x
the y
the z
the n vector plus altitude for this position
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
the latitude, longitude, and altitude for this positionA terrestrial position defined by latitude, longitude, and altitude
A terrestrial position defined by latitude, longitude, and altitude . latitude the angle north of the equator in degrees . Must be a value within this interval . Must be a value within this interval longitude altitude the distance above sea level in meters or more precisely the distance above the surface of the WGS reference ellipsoid. IllegalArgumentException when the latitude or longitude is outside the specified range
The altitude the distance above sea level or more precisely the distance above the surface of the WGS reference ellipsoid. For this project we need this distance in meters
The latitude angle. the angle north of the equator in degrees .
The longitude angle the angle east of the prime meridian in degrees
a terrestrial position defined by an N vector plus altitude
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.A terrestrial position defined by a normal vector and an altitude. An N vector is a normal Vector that points out from the surface of the WGS reference ellipsoid. The normal vector is combined with an altitude which represents the distance above the reference ellipsoid . The n vector and altitude together precisely define a position on Earth. The n vector should be a unit vector . The altitude should be in meters.
x the x component of the normal vector y the y component of the normal vector z the z component of the normal vector altitude the distance above the reference ellipsoid .
the distance above sea level in meters
the x component of the n vector
the y component of the n vector
the z component of the n vector
Finds the distance in meters from this NVector to another. This is the distance that a laser would travel. other the other position to find the position to. The distance from this position to the other in meters
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by a latitude, longitude, and altitude.A terrestrial position defined by latitude, longitude, and altitude
A terrestrial position defined by latitude, longitude, and altitude . latitude the angle north of the equator in degrees . Must be a value within this interval . Must be a value within this interval longitude altitude the distance above sea level in meters or more precisely the distance above the surface of the WGS reference ellipsoid. IllegalArgumentException when the latitude or longitude is outside the specified range
The altitude the distance above sea level or more precisely the distance above the surface of the WGS reference ellipsoid. For this project we need this distance in meters
The latitude angle. the angle north of the equator in degrees .
The longitude angle the angle east of the prime meridian in degrees
a terrestrial position defined by an N vector plus altitude
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.Implementation of a flight route, containing a series of waypoints and additional meta data.The provides capabilities for retrieving from the file system. When a new is detected in the file system it gets automatically loaded. Routes are provided via proxies containing, basic info on the flight route.The provides capabilities for retrieving from the file system. When a new is detected in the file system it gets automatically loaded. Routes are provided via proxies containing, basic info on the flight route.Abstract base class for all services that allow transferring files as a byte arrayProvider implementation for . Details seeAbstract Base class for both virtual and physical drones Michael
Set base coordinates for the drone basePosition
Get unique base coordinates for the drone base coordinatesRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangFactory class for creating from JSON strings.Monitoring message received from the GCS for a specific UAV.Services for planning and executing missions for multiple UAVs . Initial implementation of mission planning capabilities. Allows retrieving sending a mission plan as JSON String to Dronology.
The singleton ConfigurationService instanceSimple JSON Reader that converts a json String into a object. HuangManages a mission plan. Each Mission plan has one FullMissionPlan instance, and one UAVMissionPlan instance for each UAV in the Mission plan. Each of the UAV s individual mission plans are composed of MissionTasks. Once the entire mission plan is loaded, a thread is created which checks each of the individual UAVMissionPlans to determine if they can start the next task. Huang
Constructs the CoordinatedMission instance. A mission consists of one or more UAVs, each of which has a set of assigned tasks and synchronization points. mission
Loads mission from JSON file. Currently hard coded. mission MissionExecutionException
Adds an additional UAV to the mission plan. Creates the UAVMissionTasks instance and passes it a reference to the synchPointMgr uavID the ID of the UAV MissionExecutionException
Assigns a task to a specific UAV uavID UAV Identifier task Task to perform taskID Task specifics MissionExecutionException
Build all synch points
Activates next task in each UAV mission, if there is no unfinished active task MissionExecutionException
Expands flight pattern tasks MissionExecutionExceptionMission plan for an individual UAV. Part of a . Huang
Check if task if finished MissionExecutionException
Needs to actually activate the flight route. NOTE Needs to handle ROUTE, WAYPOINT, TAKEOFF, and LAND . Exception
Expand the task list with PATTERNS. Currently supports two different patterns SynchronizedTakeoff and SynchronizedLanding Assumptions SynchronizedTakeoff has a ROUTE definied immediately after. SynchronizedLanding has a ROUTE defined immediately prior. MissionExecutionExceptionDelay tasks specifying a delay after a route has been executed before commencing with the next round.
uavID taskName duration in secondsDelay tasks specifying a delay after a route has been executed before commencing with the next round.
uavID taskName duration in secondsCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionBase class for all monitorable messages.Handler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateIds for valid UAV commandsCommand sent to the GCS for stopping immediately and remain hovering in place.Proxy class for Manged Drones. This datastructure is intended to be passed to external clients and contains necessary information regarding the actual UAV managed by Dronology
edu.nd.dronology.core.vehicle.proxy.IUAVProxy getID
edu.nd.dronology.core.vehicle.proxy.IUAVProxy getStatus
edu.nd.dronology.core.vehicle.proxy.IUAVProxy getLongitude
edu.nd.dronology.core.vehicle.proxy.IUAVProxy getLatitude
edu.nd.dronology.core.vehicle.proxy.IUAVProxy getAltitude
edu.nd.dronology.core.vehicle.proxy.IUAVProxy getBatteryLevel
edu.nd.dronology.core.vehicle.proxy.IUAVProxy getVelocity
edu.nd.dronology.core.vehicle.proxy.IUAVProxy getInfo
edu.nd.dronology.core.vehicle.proxy.IUAVProxy getCoordinatesWriter Thread takes items from the outbound queue and writes it to the socket.Remote facade for handling UAVs. Initial implementation of mission planning capabilities. Allows retrieving sending a mission plan as JSON String to Dronology.Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceServices for planning and executing missions for multiple UAVs . Initial implementation of mission planning capabilities. Allows retrieving sending a mission plan as JSON String to Dronology.
The singleton ConfigurationService instanceServices for planning and executing missions for multiple UAVs . Initial implementation of mission planning capabilities. Allows retrieving sending a mission plan as JSON String to Dronology.
The singleton ConfigurationService instanceSimple JSON Reader that converts a json String into a object. HuangBase class for all predefined flight patterns that can be exandedPredefined pattern for coordinated landing that is expanded as part of a in a .Predefined pattern for coordinated take off that is expanded as part of a in a .Interface for all flight pattern implementations that can be expanded into several different .
Coordinates the flight of multiple UAVs across a potentially overlapping space consisting of a currentLocation and a targetLocation for each UAV. FOR NOW We assume that currentCoordinates and targetWayPoints for all UAVs are unique and sufficiently separated from each other. Paths to move from current to target positions may overlap. We should add this check in later on. uavMission The mission plan the pattern belongs to. currentLocation The current location from which the pattern starts. targetLocation The target location when the pattern is completed. MissionExecutionException
A containing the tasks part of that pattern.Factory class for predefined .
type The of the flight pattern to create. A flight pattern for the given pattern type. An in case the pattern is not supported.Contains a list of part mission. HuangManages a mission plan. Each Mission plan has one FullMissionPlan instance, and one UAVMissionPlan instance for each UAV in the Mission plan. Each of the UAV s individual mission plans are composed of MissionTasks. Once the entire mission plan is loaded, a thread is created which checks each of the individual UAVMissionPlans to determine if they can start the next task. Huang
Constructs the CoordinatedMission instance. A mission consists of one or more UAVs, each of which has a set of assigned tasks and synchronization points. mission
Loads mission from JSON file. Currently hard coded. mission MissionExecutionException
Adds an additional UAV to the mission plan. Creates the UAVMissionTasks instance and passes it a reference to the synchPointMgr uavID the ID of the UAV MissionExecutionException
Assigns a task to a specific UAV uavID UAV Identifier task Task to perform taskID Task specifics MissionExecutionException
Build all synch points
Activates next task in each UAV mission, if there is no unfinished active task MissionExecutionException
Expands flight pattern tasks MissionExecutionExceptionCentral control class responsible for building, initializing, and executing a . The periodically checks for new tasks that can be activated and activates them on demand.
The singleton MissionController instanceCentral control class responsible for building, initializing, and executing a . The periodically checks for new tasks that can be activated and activates them on demand.
The singleton MissionController instanceGiven a routename extract the first way point routeName
Get the home coordinates of this UAV i.e., uavID routeName MissionExecutionExceptionMission plan for an individual UAV. Part of a . Huang
Check if task if finished MissionExecutionException
Needs to actually activate the flight route. NOTE Needs to handle ROUTE, WAYPOINT, TAKEOFF, and LAND . Exception
Expand the task list with PATTERNS. Currently supports two different patterns SynchronizedTakeoff and SynchronizedLanding Assumptions SynchronizedTakeoff has a ROUTE definied immediately after. SynchronizedLanding has a ROUTE defined immediately prior. MissionExecutionExceptionSynchronization IDs for predefined, built in .The holds a list of and ensures that a point is fully synced before allowing UAVs to proceed with the next task. HuangSynchronization Point for routes assigned to UAVs. Once a is by one UAV, all collaborators have to reach the sync point in order to proceed. HuangPossible state of a Huangtask in a mission for a UAV.
The id of the UAV the task belongs to.
The name of the task.
The waypoint associated with the task.A represents a predefined pattern that is expanded when the mission is created.The singleton instance of the RemoteManager.This is the side panel that contains the AFInfoBoxes with the UAV information
Adds a box to the panel isChecked name status batteryLife healthColor lat lon alt speed hoverInPlace
Removes a box from the panel name the name ID of the drone returns true if successful. returns false if failed
a list of all drones that have their checkbox checked
true if all the drones are checked
true if all drones are not checked
Expands or collapses all the boxes visible
true if all boxes are expanded
true if all boxes are collapsed
gets updated information from dronology about the UAV s location information and status. adds any new drones to the panel and removes any drones that were deactivated
add new drones to the panel
delete old drones from the panel
update current drones statusThis is the main layout for the Active Flights UI
determines if the map should continue in follow modeThis is the set of map operation buttons in the AFInfoPanelThis is the set of map operation buttons in the AFInfoPanelFactory class for initializing a new instance. HuangFactory class for initializing a new instance. HuangManagement of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Stores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectStores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectA structured Identifier. Each object holds an id part and refers to child IDs which in turn hold again one id part, etc, which altogether form the whole identifier.
ids The ids that will be mapped to root and child ArtifactIdentifier
The id of the parent ArtifactIdentifier
The child ArtifactIdentifier
Returns all artifact identifier concatenatedA structured Identifier. Each object holds an id part and refers to child IDs which in turn hold again one id part, etc, which altogether form the whole identifier.
ids The ids that will be mapped to root and child ArtifactIdentifier
The id of the parent ArtifactIdentifier
The child ArtifactIdentifier
Returns all artifact identifier concatenatedThe singleton instance.The singleton instance.Interface for all messages that shall be subscribeable via the monitoring API.Base class for all monitorable messages.Associates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateAbstract base class for all commands sent to the GCS. Contains the id of the UAV and a unique command id.Representation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangEstablishes new, and handles established connections between Dronology and multiple GCS. Creates new and threads when a connection to a new GCS is established.The listens on a predefined port for new connections from GCS.The handles both incoming and outgoing queues. Incoming queues contain received from the UAV to be dispatched to the . The outgoing queue contains s being sent to the UAV.The singleton ConfigurationService instanceService for UAV monitoring messages Allows registering to subscribe to certain message types or topics
The singleton DroneMonitoringService instanceService for UAV monitoring messages Allows registering to subscribe to certain message types or topics
The singleton DroneMonitoringService instanceThis is the main layout for the Active Flights UI
determines if the map should continue in follow modeThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.Factory for creating the layers of the OpenStreetMap Leaflet Map.Factory for creating the layers of the OpenStreetMap Leaflet Map.SATELLITE MAP
CARTO LIGHT BASE MAP
SB Satellite Tiles
SB Normal MapConfiguration for multiple layers in the map view.
Contains information on the the url, the name, and the overlay flag for each layer displayed in the map. MichaelConfiguration for multiple layers in the map view.
Contains information on the the url, the name, and the overlay flag for each layer displayed in the map. MichaelThis is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapObsolete Replaced by MissionPlanning ImplementationObsolteRemote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceManages a mission plan. Each Mission plan has one FullMissionPlan instance, and one UAVMissionPlan instance for each UAV in the Mission plan. Each of the UAV s individual mission plans are composed of MissionTasks. Once the entire mission plan is loaded, a thread is created which checks each of the individual UAVMissionPlans to determine if they can start the next task. Huang
Constructs the CoordinatedMission instance. A mission consists of one or more UAVs, each of which has a set of assigned tasks and synchronization points. mission
Loads mission from JSON file. Currently hard coded. mission MissionExecutionException
Adds an additional UAV to the mission plan. Creates the UAVMissionTasks instance and passes it a reference to the synchPointMgr uavID the ID of the UAV MissionExecutionException
Assigns a task to a specific UAV uavID UAV Identifier task Task to perform taskID Task specifics MissionExecutionException
Build all synch points
Activates next task in each UAV mission, if there is no unfinished active task MissionExecutionException
Expands flight pattern tasks MissionExecutionExceptionMission plan for an individual UAV. Part of a . Huang
Check if task if finished MissionExecutionException
Needs to actually activate the flight route. NOTE Needs to handle ROUTE, WAYPOINT, TAKEOFF, and LAND . Exception
Expand the task list with PATTERNS. Currently supports two different patterns SynchronizedTakeoff and SynchronizedLanding Assumptions SynchronizedTakeoff has a ROUTE definied immediately after. SynchronizedLanding has a ROUTE defined immediately prior. MissionExecutionExceptionAbstract base class for all commands sent to the GCS. Contains the id of the UAV and a unique command id.Ids for valid UAV commandsCommand sent to the GCS for sending a new waypoint.Interface for all UAV commands.Command sent to the GCS for setting the groundspeed of the UAV. Ground speed is specified in m s.Command sent to the GCS for adjusting the monitoring frequency. The frequency is sent in ms.Command sent to the GCS for adjusting the state frequency. The frequency is sent in ms.Command sent to the GCS for setting a velocity vector to the UAV. The vector is specified in NED .Command sent to the GCS for taking off to a given alitude. The altitude is specified in meter.Establishes new, and handles established connections between Dronology and multiple GCS. Creates new and threads when a connection to a new GCS is established.When a new GCS connects to Dronology it sends a .Factory class for initializing a new instance. HuangThis is a SINGLETON class. To get an instance call getInstance Sets the runtime mode of FlightZone either as SIMULATION or PHYSICAL The mode may only be set one time during execution. Simulation uses soft drone objects. Physical uses real drones controlled using Dronekit API. Huang
Sets flightmode to SIMULATION. Does not allow the flight mode to be reset after it is initially set. FlightZoneException
Sets flightmode to PHYSICAL Does not allow the flight mode to be reset after it is initially set. FlightZoneException
true if in SIMULATION mode. False otherwise.
true if in PHYSICAL mode. False otherwise.Establishes new, and handles established connections between Dronology and multiple GCS. Creates new and threads when a connection to a new GCS is established.The handles both incoming and outgoing queues. Incoming queues contain received from the UAV to be dispatched to the . The outgoing queue contains s being sent to the UAV.The manages pending, executing, and completed plans for a single UAV.Management of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Central management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionRemote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the drag and drop vertical layout in which the FRInfoBoxes are stored in the assign routes UI.
list of pending plans for the UAVThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleAssigns a flight route to the drone remoteItemThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutUtility class for drawing marker and UAV icons on the map NEEDS ADDITIONAL CLEANUP REFACTORING
This function gets the flight routes from dronology core and draws them on the map. focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
updates the flight routes. Deletes old ones, adds new ones, and redraws the lines to different colors as each waypoint is reached focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
if flightRoutes.size e wayPointMarkers wayPointMarkers.clear flightRoutes.clear
This function updates the position of the drone icons on the map focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
This function adds icons on the map that represent each drone s position. focused this is the drone that is focused in the AFInfoPanel. It s flight route will be orange checked this is a list of drones that have their checkbox checked in the AFInfoPanel. Their routes will be black.
assists in the logic of updating flight routes coordinates iThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapAbstract base class for all commands sent to the GCS. Contains the id of the UAV and a unique command id.The handles both incoming and outgoing queues. Incoming queues contain received from the UAV to be dispatched to the . The outgoing queue contains s being sent to the UAV.Threat handling incoming messages from a GCS. The can handle json messages that are transformed into UAV Messages by the .Threat handling incoming messages from a GCS. The can handle json messages that are transformed into UAV Messages by the .Writer Thread takes items from the outbound queue and writes it to the socket.otherLogger The logger to forward the logs before throwing.
Logs throwable with trace level and throws it. throwable Throwable
Logs throwable with debug level and throws it. throwable Throwable
Logs throwable with info level and throws it. throwable Throwable
Logs throwable with warn level and throws it. throwable Throwable
Logs throwable with error level and throws it. throwable Throwable
Logs throwable with fatal level and throws it. throwable Throwable
Logs runtimeException with trace level and throws it. runtimeException
Logs runtimeException with debug level and throws it. runtimeException
Logs runtimeException with info level and throws it. runtimeException
Logs runtimeException with warn level and throws it. runtimeException
Logs runtimeException with error level and throws it. runtimeException
Logs runtimeException with fatal level and throws it. runtimeExceptionThe root instance of all loggers for the log j implementation.Configuration Parameter for Dronology.
The maximum number of individual uav threads i.e., the maximum number of uavs handled by dronology.
The speed with which the drone returns to its home location once the return to home command is issued. If set to , the uav uses its last known speed as the return to home speed.
The safety zone of the uav in m which is used for determining whether a uav is allowed to take off.
The takeoff altitude of the uav .
The distance to the waypoint in m in which the waypoint is considered reached.
The distance to the altitude in m in which the takeoff height reached.
Altitude used for the last waypoint when issuing a return to home command before initiating the landing procedure.
max. ft AGL m
Frequency the status check timer is executed
Frequency the collision avoidance check timer is executedA terrestrial position in WGS . this class implements utility methods for subclasses.
Convert this position if necessary to an NVector. a terrestrial position defined an NVector and an altitude.
Convert this position if necessary to a PVector. a terrestrial position defined an X, Y and Z coordinate.
Convert this position if necessary to an LlaCoordinate. a terrestrial position defined by a latitude, longitude, and altitude.
Calculates the distance from this position to other position. This is the distance a laser bean would travel to reach the other point. other the position of the point to calculate the distance to. the distance to the other position in meters
Calculates the distance a drone would realistically travel to get from this position to the other position. Warning this code is slow. The time it takes to run is proportional to the distance from this to other. other the position of the point to calculate the distance to. the distance a drone would need to travel to get to the other position in meters
Calculate the rotation matrix representation of this position. This rotation matrix can take displacement vectors in ECEF coordinates and rotate them into NED coordinates at this position. This position cannot be at the poles as north and east directions don t make sense there. This is the matrix inverse of equation in this paper. a x rotation matrix where the rows can be interpreted as unit vectors pointing in the north, east and down directions respectively.
Calculates the number of meters North, East and down from this position to another global position. other the terrestrial position to transform into NED coordinates using this position as the origin the NED coordinates as a vector with elements where the first element is the number of meters north, the second element is the number of meters east and the third element is the number of meters down.
Calculates the latitude, longitude and altitude of a relative position given as the number of meters North, East, and down from this position. ned a vector with three elements where the first is the number of meters north, the second is the number of meters east, and the third is the number of meters down. the latitude longitude and altitude of the other positionA terrestrial position defined by latitude, longitude, and altitude
A terrestrial position defined by latitude, longitude, and altitude . latitude the angle north of the equator in degrees . Must be a value within this interval . Must be a value within this interval longitude altitude the distance above sea level in meters or more precisely the distance above the surface of the WGS reference ellipsoid. IllegalArgumentException when the latitude or longitude is outside the specified range
The altitude the distance above sea level or more precisely the distance above the surface of the WGS reference ellipsoid. For this project we need this distance in meters
The latitude angle. the angle north of the equator in degrees .
The longitude angle the angle east of the prime meridian in degrees
a terrestrial position defined by an N vector plus altitude
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.MichaelHolds a fleet of virtual or physical drones. When activated, UAVs are registered with the fleet manager and can be retrieved for assigning routes to them.
Specifies whether virtual or physical drones will be created according to the previously specified runtime drone type.
Checks for an available drone from the fleet. true if drone is available, false if it is not.
Returns the next available drone. Currently uses FIFO to recycle drones.
When a drone completes a mission, returns it to the pool of available drones. droneFactory class for initializing a new instance. HuangThis is a SINGLETON class. To get an instance call getInstance Sets the runtime mode of FlightZone either as SIMULATION or PHYSICAL The mode may only be set one time during execution. Simulation uses soft drone objects. Physical uses real drones controlled using Dronekit API. Huang
Sets flightmode to SIMULATION. Does not allow the flight mode to be reset after it is initially set. FlightZoneException
Sets flightmode to PHYSICAL Does not allow the flight mode to be reset after it is initially set. FlightZoneException
true if in SIMULATION mode. False otherwise.
true if in PHYSICAL mode. False otherwise.The manages pending, executing, and completed plans for a single UAV.Management of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Stores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectDirections for one flight containing multiple waypoints. Huang
Constructor managedDroneCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionObsolete Replaced by MissionPlanning ImplementationObsolteUses the bisection method to iteratively hone in on the nvector that is metersToTravel distance away from the current n vector along the path that goes from current to target. A path can be thought of as the set of NVectors you can create by interpolating between current and target. This code takes advantage of this to find the NVector on this path that is the right distance away from the current distance. current drone current position target drone target position metersToTravel the distance the drone should travel along the path from current to target the nvector taht is meters distance away from current along the path that goes from current to targetUse as dummy object handy for synchronized blocks.Managed Hashtable stores a key and a list as value a query on the hashtable never returns null but an empty list. The list does not need to be created initially Key type. Value type.Waypoint implementation used in and Fight Route to represent coordinates and the approaching speed towards the respective waypoint. This class have to be as this class is passed via the remote interface.Abstract Base class for both virtual and physical drones Michael
Set base coordinates for the drone basePosition
Get unique base coordinates for the drone base coordinatesAssociates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusiDrone interface Huang .
latitude of drone
longitude of drone
altitude of drone
Fly drone to target coordinates targetCoordinates speed
current coordinates
unique name of drone
Land the drone. Update status. FlightZoneException
Takeoff. Update status. FlightZoneException
Sets drones coordinates lat latitude lon Longitude alt AltitudeHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateAbstract base class for all commands sent to the GCS. Contains the id of the UAV and a unique command id.Ids for valid UAV commandsCommand sent to the GCS for sending a new waypoint.Interface for all UAV commands.Command sent to the GCS for setting the groundspeed of the UAV. Ground speed is specified in m s.Command sent to the GCS for adjusting the monitoring frequency. The frequency is sent in ms.Command sent to the GCS for adjusting the state frequency. The frequency is sent in ms.Command sent to the GCS for setting a velocity vector to the UAV. The vector is specified in NED .Command sent to the GCS for taking off to a given alitude. The altitude is specified in meter.Representation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameWhat should the behavior be when traveling to the opposite side of the Earth Perhaps the code should throw an exception.
Go from one end zone at Notre Dame Stadium to the other.Each NED test should do things. It should make sure the NED coordinates are correct and it should make sure that going back to LLA from NED is correct
Tests rot mat were generatedWent to google maps and found a football field. Football fields are usually yards from end zone to end zone. I right clicked on each end zone and found the latitude and longitude. I then found the elevation of the field. I got the values for n and n from Levi Stadium .
Of course right clicking on google maps is not very precise so I set epsilon to half a foot in meters. . meters . feet The distance function works in meters
Suppose position B is meters above position A. Then the distance from A to B should be meters
In testToPVector , testPvector , testPvector , ..., testPvector The local variables x, y, and z where calculated in python using a library called nvector. Here is the python code import nvector as nv wgs nv.FrameE pointA wgs .GeoPoint print .pvector.ravel Note z altitude To install nvector you can use pip pip install nvectorImplementation of a flight route, containing a series of waypoints and additional meta data.Remote Interface for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.Interface for handling communication between server UI and server services.
Retrieve the desired service to offer remote operations. Requested service has to extends . service The Service to retrieve. The requested Service. RemoteException DronologyServiceException
A list of all registered Services. RemoteException DronologyServiceException
Adds a service listener to all currently available services informing on service status changes. listener The listener to be added. RemoteException
listener The listener to be removed. RemoteException
RemoteException DronologyServiceExceptionRegister the given directory with the WatchServiceService for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.
The singleton ConfigurationService instanceService instance for handling UAVs See for details.Remote facade for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.Remote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceObsoleteThe provides capabilities for retrieving from the file system. When a new is detected in the file system it gets automatically loaded. Routes are provided via proxies containing, basic info on the flight route.The singleton instance of the RemoteManager.This is the control panel framework for the Flight Routes UI. It has an info panel, which displays the list of flight routes, and a main layout, which displays the map and grid.This layout gives information about each of the flight routes along with options to edit or delete.This is the list of selectable flight routes.This is the list of selectable flight routes.This UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondConfiguration singleton class that stores all UI parameters
set default values for variablesConfiguration singleton class that stores all UI parameters
set default values for variablesThis is the main layout for the Active Flights UI
determines if the map should continue in follow modeThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutConfiguration singleton class that stores all UI parameters
set default values for variablesConfiguration singleton class that stores all UI parameters
set default values for variablesThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutConfiguration singleton class that stores all UI parameters
set default values for variablesThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutConfiguration singleton class that stores all UI parameters
set default values for variablesConfiguration singleton class that stores all UI parameters
set default values for variablesThis is the control panel framework for the Activated Flights UIThis is the set of emergency buttons in the AFInfoPanelThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the side panel that contains the AFInfoBoxes with the UAV information
Adds a box to the panel isChecked name status batteryLife healthColor lat lon alt speed hoverInPlace
Removes a box from the panel name the name ID of the drone returns true if successful. returns false if failed
a list of all drones that have their checkbox checked
true if all the drones are checked
true if all drones are not checked
Expands or collapses all the boxes visible
true if all boxes are expanded
true if all boxes are collapsed
gets updated information from dronology about the UAV s location information and status. adds any new drones to the panel and removes any drones that were deactivated
add new drones to the panel
delete old drones from the panel
update current drones statusStores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangThe manages pending, executing, and completed plans for a single UAV.Management of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Central management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionMichaelHolds a fleet of virtual or physical drones. When activated, UAVs are registered with the fleet manager and can be retrieved for assigning routes to them.
Specifies whether virtual or physical drones will be created according to the previously specified runtime drone type.
Checks for an available drone from the fleet. true if drone is available, false if it is not.
Returns the next available drone. Currently uses FIFO to recycle drones.
When a drone completes a mission, returns it to the pool of available drones. droneThe manages pending, executing, and completed plans for a single UAV.Management of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Stores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectDirections for one flight containing multiple waypoints. Huang
Constructor managedDroneDirections for one flight containing multiple waypoints. Huang
Constructor managedDroneCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionUse as dummy object handy for synchronized blocks.Managed Hashtable stores a key and a list as value a query on the hashtable never returns null but an empty list. The list does not need to be created initially Key type. Value type.Waypoint implementation used in and Fight Route to represent coordinates and the approaching speed towards the respective waypoint. This class have to be as this class is passed via the remote interface.Associates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameRemote Interface for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.Service for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.
The singleton ConfigurationService instanceService instance for handling UAVs See for details.Remote facade for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.Remote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceWaypoint implementation used in and Fight Route to represent coordinates and the approaching speed towards the respective waypoint. This class have to be as this class is passed via the remote interface.Implementation of a flight route, containing a series of waypoints and additional meta data.Remote facade for handling UAV routes Allows creating and modifying routes.Service for handling flight routes. Allows creating new routes, retrieving existing routus, and transmitting modified routes.
The singleton ConfigurationService instanceThe provides capabilities for retrieving from the file system. When a new is detected in the file system it gets automatically loaded. Routes are provided via proxies containing, basic info on the flight route.The provides capabilities for retrieving from the file system. When a new is detected in the file system it gets automatically loaded. Routes are provided via proxies containing, basic info on the flight route.Directions for one flight containing multiple waypoints. Huang
Constructor managedDroneCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionAssociates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionAssociates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionAssociates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateMichaelHolds a fleet of virtual or physical drones. When activated, UAVs are registered with the fleet manager and can be retrieved for assigning routes to them.
Specifies whether virtual or physical drones will be created according to the previously specified runtime drone type.
Checks for an available drone from the fleet. true if drone is available, false if it is not.
Returns the next available drone. Currently uses FIFO to recycle drones.
When a drone completes a mission, returns it to the pool of available drones. droneThe manages pending, executing, and completed plans for a single UAV.The manages pending, executing, and completed plans for a single UAV.Management of pending plans for individual UAVs. Each active UAV has a that keeps track of the assigned flight plans.Stores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectDirections for one flight containing multiple waypoints. Huang
Constructor managedDroneCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionUse as dummy object handy for synchronized blocks.Managed Hashtable stores a key and a list as value a query on the hashtable never returns null but an empty list. The list does not need to be created initially Key type. Value type.Waypoint implementation used in and Fight Route to represent coordinates and the approaching speed towards the respective waypoint. This class have to be as this class is passed via the remote interface.Associates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameRemote Interface for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.Service for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.
The singleton ConfigurationService instanceService instance for handling UAVs See for details.Remote facade for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.Remote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceAssociates a drone state object with a drone. Normal behavior ON GROUND AWAITING TAKEOFF CLEARANCE TAKING OFF FLYING In IN AIR LANDING Unavailable transitions will result in an exception being thrown. Huang
Constructor States for both FlightMode and SafetyMode set to initial state uav The UAV the state manager is assigned to.
Set Flight Mode to OnGround FlightZoneException if mode change does not follow allowed state transition.
Set Flight Mode to UserControlled
Set Flight mode to awaiting Takeoff Clearance FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Taking off FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Flying FlightZoneException if mode change does not follow allowed state transition.
Set flight mode to Landing FlightZoneException if mode change does not follow allowed state transition.
true if drone is currently on the ground, false otherwise
true if drone is currently in AwaitingTakeOffClearance mode, false otherwise
true if drone is currently taking off, false otherwise
true if drone is currently flying, false otherwise
true if drone is currently landing, false otherwise
current statusHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateA terrestrial position defined by latitude, longitude, and altitude
A terrestrial position defined by latitude, longitude, and altitude . latitude the angle north of the equator in degrees . Must be a value within this interval . Must be a value within this interval longitude altitude the distance above sea level in meters or more precisely the distance above the surface of the WGS reference ellipsoid. IllegalArgumentException when the latitude or longitude is outside the specified range
The altitude the distance above sea level or more precisely the distance above the surface of the WGS reference ellipsoid. For this project we need this distance in meters
The latitude angle. the angle north of the equator in degrees .
The longitude angle the angle east of the prime meridian in degrees
a terrestrial position defined by an N vector plus altitude
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.A terrestrial position defined by latitude, longitude, and altitude
A terrestrial position defined by latitude, longitude, and altitude . latitude the angle north of the equator in degrees . Must be a value within this interval . Must be a value within this interval longitude altitude the distance above sea level in meters or more precisely the distance above the surface of the WGS reference ellipsoid. IllegalArgumentException when the latitude or longitude is outside the specified range
The altitude the distance above sea level or more precisely the distance above the surface of the WGS reference ellipsoid. For this project we need this distance in meters
The latitude angle. the angle north of the equator in degrees .
The longitude angle the angle east of the prime meridian in degrees
a terrestrial position defined by an N vector plus altitude
The formula this code is based on can be found in a journal article called A Non singular Horizontal Position Representation by Kenneth Gade. You can find it at https goo.gl iCqdCn Note equation is unconventional as it swaps the z component with x component. This code follows the more common convention and returns z and x to their proper place
a terrestrial position defined by an x, y, and z coordinate in an Earth centered Earth fixed reference frame.Waypoint implementation used in and Fight Route to represent coordinates and the approaching speed towards the respective waypoint. This class have to be as this class is passed via the remote interface.This layout gives information about each of the flight routes along with options to edit or delete.This is the list of selectable flight routes.This is the main layout for the Flight Routes UI.This layout gives information about each of the flight routes along with options to edit or delete.This is the list of selectable flight routes.This is the main layout for the Flight Routes UI.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the info bar above the map that gives route information and contains the edit and delete buttons. jhollanThis is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapiDrone interface Huang .
latitude of drone
longitude of drone
altitude of drone
Fly drone to target coordinates targetCoordinates speed
current coordinates
unique name of drone
Land the drone. Update status. FlightZoneException
Takeoff. Update status. FlightZoneException
Sets drones coordinates lat latitude lon Longitude alt AltitudeHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateRepresentation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameRemote Interface for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.Service for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.
The singleton ConfigurationService instanceService instance for handling UAVs See for details.Remote facade for handling UAVs. Allows initializing new UAVs. Allows retrieving active UAVs which returns a proxy of the actual physical or virtual uav.This is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleAssigns a flight route to the drone remoteItemThe is used for creating and providing images to various different windows and views.
The default UAV icon.
The icon when a UAV is in focus.
The icon when a UAV is in selected.
The Waypoint dot.This is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the bar that indicates when the active flights UI is in follow modeThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the main layout for the Active Flights UI
determines if the map should continue in follow modeThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the side panel that contains the AFInfoBoxes with the UAV information
Adds a box to the panel isChecked name status batteryLife healthColor lat lon alt speed hoverInPlace
Removes a box from the panel name the name ID of the drone returns true if successful. returns false if failed
a list of all drones that have their checkbox checked
true if all the drones are checked
true if all drones are not checked
Expands or collapses all the boxes visible
true if all boxes are expanded
true if all boxes are collapsed
gets updated information from dronology about the UAV s location information and status. adds any new drones to the panel and removes any drones that were deactivated
add new drones to the panel
delete old drones from the panel
update current drones statusThis is the main layout for the Active Flights UI
determines if the map should continue in follow modeThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the set of map operation buttons in the AFInfoPanelThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis is the set of emergency buttons in the AFInfoPanelThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the side panel that contains the AFInfoBoxes with the UAV information
Adds a box to the panel isChecked name status batteryLife healthColor lat lon alt speed hoverInPlace
Removes a box from the panel name the name ID of the drone returns true if successful. returns false if failed
a list of all drones that have their checkbox checked
true if all the drones are checked
true if all drones are not checked
Expands or collapses all the boxes visible
true if all boxes are expanded
true if all boxes are collapsed
gets updated information from dronology about the UAV s location information and status. adds any new drones to the panel and removes any drones that were deactivated
add new drones to the panel
delete old drones from the panel
update current drones statusThis is the set of emergency buttons in the AFInfoPanelThis is the set of emergency buttons in the AFInfoPanelThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the side panel that contains the AFInfoBoxes with the UAV information
Adds a box to the panel isChecked name status batteryLife healthColor lat lon alt speed hoverInPlace
Removes a box from the panel name the name ID of the drone returns true if successful. returns false if failed
a list of all drones that have their checkbox checked
true if all the drones are checked
true if all drones are not checked
Expands or collapses all the boxes visible
true if all boxes are expanded
true if all boxes are collapsed
gets updated information from dronology about the UAV s location information and status. adds any new drones to the panel and removes any drones that were deactivated
add new drones to the panel
delete old drones from the panel
update current drones statusClear all waypoints
Check if more waypoints exist boolean
Specifies if flight is currently under a safety directive. isUnderSafetyDirectives
Removes one wayPoint typically when a drone reaches a waypoint. wayPoint
Add a waypoint to the flight directive. wayPointStores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectStores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectDirections for one flight containing multiple waypoints. Huang
Constructor managedDroneCentral management class for all UAV related actions. This includes take off, and landing checks as well as assignment of flight plans to UAVs.
Constructs a new FlightZoneManager. InterruptedException
Checks if the next pending flight is able to takeoff. Currently takeoff occurs in order of pending list. droneFleet FlightZoneExceptionHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateRemote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the main layout for the Flight Routes UI.This is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the side panel that contains the AFInfoBoxes with the UAV information
Adds a box to the panel isChecked name status batteryLife healthColor lat lon alt speed hoverInPlace
Removes a box from the panel name the name ID of the drone returns true if successful. returns false if failed
a list of all drones that have their checkbox checked
true if all the drones are checked
true if all drones are not checked
Expands or collapses all the boxes visible
true if all boxes are expanded
true if all boxes are collapsed
gets updated information from dronology about the UAV s location information and status. adds any new drones to the panel and removes any drones that were deactivated
add new drones to the panel
delete old drones from the panel
update current drones statusThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the main layout for the Flight Routes UI.This is the class that contains all logic for displaying the latitude and longitude locations of the pins on the map. There is code in its constructor that ensures the values input into the table are usable. It contains functions that cause the grid to enter and exit edit mode, functions to add and delete a column of Delete buttons, and it contains a grid that displays information about waypoints.This UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the main layout for the Active Flights UI
determines if the map should continue in follow modeThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis is the main layout for the Active Flights UI
determines if the map should continue in follow modeThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the control panel framework for the Activated Flights UIThis is the side panel that contains the AFInfoBoxes with the UAV information
Adds a box to the panel isChecked name status batteryLife healthColor lat lon alt speed hoverInPlace
Removes a box from the panel name the name ID of the drone returns true if successful. returns false if failed
a list of all drones that have their checkbox checked
true if all the drones are checked
true if all drones are not checked
Expands or collapses all the boxes visible
true if all boxes are expanded
true if all boxes are collapsed
gets updated information from dronology about the UAV s location information and status. adds any new drones to the panel and removes any drones that were deactivated
add new drones to the panel
delete old drones from the panel
update current drones statusThis is the main layout for the Active Flights UI
determines if the map should continue in follow modeThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis navigation bar switches between the active flights layout and the flight routes layout.This is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the side panel that contains the AFInfoBoxes with the UAV information
Adds a box to the panel isChecked name status batteryLife healthColor lat lon alt speed hoverInPlace
Removes a box from the panel name the name ID of the drone returns true if successful. returns false if failed
a list of all drones that have their checkbox checked
true if all the drones are checked
true if all drones are not checked
Expands or collapses all the boxes visible
true if all boxes are expanded
true if all boxes are collapsed
gets updated information from dronology about the UAV s location information and status. adds any new drones to the panel and removes any drones that were deactivated
add new drones to the panel
delete old drones from the panel
update current drones statusThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis is the main layout for the Flight Routes UI.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the info bar above the map that gives route information and contains the edit and delete buttons. jhollanThis is the main layout for the Flight Routes UI.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the class that contains all logic for displaying the latitude and longitude locations of the pins on the map. There is code in its constructor that ensures the values input into the table are usable. It contains functions that cause the grid to enter and exit edit mode, functions to add and delete a column of Delete buttons, and it contains a grid that displays information about waypoints.This is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the control panel framework for the Flight Routes UI. It has an info panel, which displays the list of flight routes, and a main layout, which displays the map and grid.This is the list of selectable flight routes.This is the main layout for the Flight Routes UI.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the info bar above the map that gives route information and contains the edit and delete buttons. jhollanThis is the main layout for the Flight Routes UI.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the class that contains all logic for displaying the latitude and longitude locations of the pins on the map. There is code in its constructor that ensures the values input into the table are usable. It contains functions that cause the grid to enter and exit edit mode, functions to add and delete a column of Delete buttons, and it contains a grid that displays information about waypoints.This is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the main layout for the Flight Routes UI.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the main layout for the Flight Routes UI.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the class that contains all logic for displaying the latitude and longitude locations of the pins on the map. There is code in its constructor that ensures the values input into the table are usable. It contains functions that cause the grid to enter and exit edit mode, functions to add and delete a column of Delete buttons, and it contains a grid that displays information about waypoints.This is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the class that contains all logic for displaying the latitude and longitude locations of the pins on the map. There is code in its constructor that ensures the values input into the table are usable. It contains functions that cause the grid to enter and exit edit mode, functions to add and delete a column of Delete buttons, and it contains a grid that displays information about waypoints.This is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the class that contains all logic for displaying the latitude and longitude locations of the pins on the map. There is code in its constructor that ensures the values input into the table are usable. It contains functions that cause the grid to enter and exit edit mode, functions to add and delete a column of Delete buttons, and it contains a grid that displays information about waypoints.This UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the class that contains all logic for displaying the latitude and longitude locations of the pins on the map. There is code in its constructor that ensures the values input into the table are usable. It contains functions that cause the grid to enter and exit edit mode, functions to add and delete a column of Delete buttons, and it contains a grid that displays information about waypoints.This is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the class that contains all logic for displaying the latitude and longitude locations of the pins on the map. There is code in its constructor that ensures the values input into the table are usable. It contains functions that cause the grid to enter and exit edit mode, functions to add and delete a column of Delete buttons, and it contains a grid that displays information about waypoints.This is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapThis is the list of selectable flight routes.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the info bar above the map that gives route information and contains the edit and delete buttons. jhollanThis is the main layout for the Flight Routes UI.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the info bar above the map that gives route information and contains the edit and delete buttons. jhollanThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondThis is the class that contains all logic for displaying the latitude and longitude locations of the pins on the map. There is code in its constructor that ensures the values input into the table are usable. It contains functions that cause the grid to enter and exit edit mode, functions to add and delete a column of Delete buttons, and it contains a grid that displays information about waypoints.This is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the list of selectable flight routes.This is the main layout for the Flight Routes UI.This is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutHolds a fleet of virtual or physical drones. When activated, UAVs are registered with the fleet manager and can be retrieved for assigning routes to them.
Specifies whether virtual or physical drones will be created according to the previously specified runtime drone type.
Checks for an available drone from the fleet. true if drone is available, false if it is not.
Returns the next available drone. Currently uses FIFO to recycle drones.
When a drone completes a mission, returns it to the pool of available drones. droneStores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectRemote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceThis is the control panel framework for the Flight Routes UI. It has an info panel, which displays the list of flight routes, and a main layout, which displays the map and grid.This layout gives information about each of the flight routes along with options to edit or delete.This is the list of selectable flight routes.This is the main layout for the Flight Routes UI.This is the map component for the Flight Routes UI. It has the code for creating waypoint windows and popup views, the functions related to displaying the board in its various states, methods related to entering and exiting edit mode, click listener constructors for the edit bar, and functions related to the route description.
Creates a window that allows the user to input altitude and transit speed information about a newly created waypoint. Values are read in and used in the MapMarkerUtilties class.
Creates a popup view that shows information about a waypoint once a mouse over listener is activated corresponding to a waypoint. Values are set in the MapMarkerUtilities class.This is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the drag and drop vertical layout in which the FRInfoBoxes are stored in the assign routes UI.
list of pending plans for the UAVThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the main layout for the Flight Routes UI.This is the UI for assigning new routes to a UAV
in order list of flight routes to be assigned to the UAV based on the order in the AFDragLayout
removes a route from the AFDragLayout indexThis is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis is the main layout for the Flight Routes UI.This is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis is the class that contains all logic for plotting flight routes. It contains logic for all listeners assigned to waypoints and polylines, the addition of waypoints, updating waypoints, updating pins on the map, entering and exiting edit mode, setting altitude and transit speed from input values, and related functions.
wayPoints mode determines the color of the line. is gray. is black. is orange. For flight routes, the mode should primarily be . For active flights, it varies on if a drone is focused, checked, or neither. fromActive should be true if drawLines is being called from the active flights UI. This determines if the first line segment should be green . list of polylines drawn on the mapUses the bisection method to iteratively hone in on the nvector that is metersToTravel distance away from the current n vector along the path that goes from current to target. A path can be thought of as the set of NVectors you can create by interpolating between current and target. This code takes advantage of this to find the NVector on this path that is the right distance away from the current distance. current drone current position target drone target position metersToTravel the distance the drone should travel along the path from current to target the nvector taht is meters distance away from current along the path that goes from current to targetWhat should the behavior be when traveling to the opposite side of the Earth Perhaps the code should throw an exception.
Go from one end zone at Notre Dame Stadium to the other.Abstract factory class for drone fleet factory Jane
Returns list of drones array list of iDrones DroneExceptionFactory class for initializing a new instance. HuangFactory class for initializing a new instance. HuangClear all waypoints
Check if more waypoints exist boolean
Specifies if flight is currently under a safety directive. isUnderSafetyDirectives
Removes one wayPoint typically when a drone reaches a waypoint. wayPoint
Add a waypoint to the flight directive. wayPointStores flight information including its waypoints and current status. Huang .
flight ID
Starting Coordinates
Ending Coordinates
Returns the drone assigned to the flight plan. Will return null if no drone is yet assigned. iDrone
drone true if drone is currently flying, false otherwise. FlightZoneException
Sets flightplan status to completed when called. true FlightZoneException
Returns current flightplan status status
Returns way points List
Returns start time of flight. date object
REturns end time of flight. date objectDirections for one flight containing multiple waypoints. Huang
Constructor managedDroneThe movement simulator simulates the movement of a to reach its assigned waypoints.Computes the current position of a virtual drone as it moves during flight. Serves as a lightweight SITL for a drone. Huang
Creates a flight simulator object for a single virtual drone drone
Sets current flight path from current position to a targeted position currentPos Coordinates of current position targetPos Coordinates of target position
Computes the distance between current position and target position distance remaining in degree points.
Computes the delta between the drones current latitude and its target latitude.
Computes the delta between the drones current longitude and its target longitude
Computes the angle at which a drone is flying with respect to the vertical
Computes the position of the drone following one step. Checks if destination has been reached. step Distance in degree points to move per iteration isStillMoving
Checks if a drone has reached its target destination. distanceMovedPerTimeStep Checks location with respect to target position. true if target position is reached.Simple simulator implementation containing a flight simulator and a battery simulator.Abstract Base class for both virtual and physical drones Michael
Set base coordinates for the drone basePosition
Get unique base coordinates for the drone base coordinatesiDrone interface Huang .
latitude of drone
longitude of drone
altitude of drone
Fly drone to target coordinates targetCoordinates speed
current coordinates
unique name of drone
Land the drone. Update status. FlightZoneException
Takeoff. Update status. FlightZoneException
Sets drones coordinates lat latitude lon Longitude alt AltitudeHandler class for both and . Handles basic functionality that is independent of a virtual or physical endpoint. Contains information on coordinates, state, and flight instructions. Huang
Constructs drone drone drnName
Assigns a flight directive to the managed drone flightDirective
Removes an assigned flight
targetAltitude Sets target altitude for takeoff
Controls takeoff of drone FlightZoneException
Delegates flyto behavior to virtual or physical drone targetCoordinates speed
Gets current coordinates from virtual or physical drone current coordinates
unique drone ID
Land the drone. Delegate land functions to virtual or physical drone FlightZoneException
Temporarily Halt haltinms
Temporarily Halt haltinms FlightZoneException
return current flight mode state droneState
current safety mode stateCommand sent to the GCS for sending a new waypoint.Command sent to the GCS for taking off to a given alitude. The altitude is specified in meter.Representation of a physical UAV which either interacts with real hardware or the SITL simulated UAV. HuangRepresentation of a virtual UAV which is controlled by the internal simulator. Huang
Constructs drone without specifying its current position. This will be used by the physical drone where positioning status will be acquired from the drone. drnNameThe home location proviied as parameter does not exist in the director
home is the first coordinate
home is the last coordinate
home is a coordinate somewhere in the middle of the listImplementation of a flight route, containing a series of waypoints and additional meta data.Service instance for handling UAVs See for details.Remote facade for handling UAV fligths Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .Service for handling UAV flights Allows assigning flight plans to UAVs Allows sending flight related commands to UAVs .
The singleton ConfigurationService instanceThe provides capabilities for retrieving from the file system. When a new is detected in the file system it gets automatically loaded. Routes are provided via proxies containing, basic info on the flight route.Uses the bisection method to iteratively hone in on the nvector that is metersToTravel distance away from the current n vector along the path that goes from current to target. A path can be thought of as the set of NVectors you can create by interpolating between current and target. This code takes advantage of this to find the NVector on this path that is the right distance away from the current distance. current drone current position target drone target position metersToTravel the distance the drone should travel along the path from current to target the nvector taht is meters distance away from current along the path that goes from current to targetWhat should the behavior be when traveling to the opposite side of the Earth Perhaps the code should throw an exception.
Go from one end zone at Notre Dame Stadium to the other.Each NED test should do things. It should make sure the NED coordinates are correct and it should make sure that going back to LLA from NED is correct
Tests rot mat were generatedUses the bisection method to iteratively hone in on the nvector that is metersToTravel distance away from the current n vector along the path that goes from current to target. A path can be thought of as the set of NVectors you can create by interpolating between current and target. This code takes advantage of this to find the NVector on this path that is the right distance away from the current distance. current drone current position target drone target position metersToTravel the distance the drone should travel along the path from current to target the nvector taht is meters distance away from current along the path that goes from current to targetWent to google maps and found a football field. Football fields are usually yards from end zone to end zone. I right clicked on each end zone and found the latitude and longitude. I then found the elevation of the field. I got the values for n and n from Levi Stadium .
Of course right clicking on google maps is not very precise so I set epsilon to half a foot in meters. . meters . feet The distance function works in meters
Suppose position B is meters above position A. Then the distance from A to B should be meters
In testToPVector , testPvector , testPvector , ..., testPvector The local variables x, y, and z where calculated in python using a library called nvector. Here is the python code import nvector as nv wgs nv.FrameE pointA wgs .GeoPoint print .pvector.ravel Note z altitude To install nvector you can use pip pip install nvectorWent to google maps and found a football field. Football fields are usually yards from end zone to end zone. I right clicked on each end zone and found the latitude and longitude. I then found the elevation of the field. I got the values for n and n from Levi Stadium .
Of course right clicking on google maps is not very precise so I set epsilon to half a foot in meters. . meters . feet The distance function works in meters
Suppose position B is meters above position A. Then the distance from A to B should be meters
In testToPVector , testPvector , testPvector , ..., testPvector The local variables x, y, and z where calculated in python using a library called nvector. Here is the python code import nvector as nv wgs nv.FrameE pointA wgs .GeoPoint print .pvector.ravel Note z altitude To install nvector you can use pip pip install nvectorWent to google maps and found a football field. Football fields are usually yards from end zone to end zone. I right clicked on each end zone and found the latitude and longitude. I then found the elevation of the field. I got the values for n and n from Levi Stadium .
Of course right clicking on google maps is not very precise so I set epsilon to half a foot in meters. . meters . feet The distance function works in meters
Suppose position B is meters above position A. Then the distance from A to B should be meters
In testToPVector , testPvector , testPvector , ..., testPvector The local variables x, y, and z where calculated in python using a library called nvector. Here is the python code import nvector as nv wgs nv.FrameE pointA wgs .GeoPoint print .pvector.ravel Note z altitude To install nvector you can use pip pip install nvectorHow off should toLla be How about mm To get that we need to convert mm to meters . . Now we need to find how many degrees around the earth . Lets assume a worse case scenario, we are measuring at the equator in the east west direction. In this case we should use the semi major axis . meters for our radius radians radius sector length sector length . radius . so radians sector length radius . . radians . e now we need to know how many degrees that is Math.toDegrees . E so our epsilon for testing latitude and longitude should be . EWent to google maps and found a football field. Football fields are usually yards from end zone to end zone. I right clicked on each end zone and found the latitude and longitude. I then found the elevation of the field. I got the values for n and n from Levi Stadium .
Of course right clicking on google maps is not very precise so I set epsilon to half a foot in meters. . meters . feet The distance function works in meters
Suppose position B is meters above position A. Then the distance from A to B should be meters
In testToPVector , testPvector , testPvector , ..., testPvector The local variables x, y, and z where calculated in python using a library called nvector. Here is the python code import nvector as nv wgs nv.FrameE pointA wgs .GeoPoint print .pvector.ravel Note z altitude To install nvector you can use pip pip install nvectorHow off should toLla be How about mm To get that we need to convert mm to meters . . Now we need to find how many degrees around the earth . Lets assume a worse case scenario, we are measuring at the equator in the east west direction. In this case we should use the semi major axis . meters for our radius radians radius sector length sector length . radius . so radians sector length radius . . radians . e now we need to know how many degrees that is Math.toDegrees . E so our epsilon for testing latitude and longitude should be . EThis layout gives information about each of the flight routes along with options to edit or delete.This is the list of selectable flight routes.This is the box in the side panel that contains a UAV s information
default constructor
Expands and collapses the box visibleThis layout gives information about each of the flight routes along with options to edit or delete.This is the list of selectable flight routes.Configuration singleton class that stores all UI parameters
set default values for variablesThis is the map component for the Active Flights UI
This function sets the center and zoom of the map to include all drones and their flight routes. It finds the average latitude and longitude first. It then finds the point farthest from the center and bases the zoom level off of that point.
follow is a boolean variable that is true when the map is following drones
followZoom determines whether the map should zoom in on the drones in follow mode. Only happens once initially when the user clicks the button to follow the drones on the map.
This function sets the center of the map as an average of the drones that it is following. This will constantly change as each drone flies. names The list of drone names that the map should be following
this is a listener that displays an AFInfoBox in a popup over the drone that was just hovered over
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layout
returns the waypoint popup
returns the drone popup
This listener displays a popup of information about a certain waypoint. Virtually the same listener used in the flight routes UI.
find the location on the screen to display the popup. Takes the absolute position of the mouse and converts that to the relative position of the mouse on the map. Uses the map dimensions and the map position within the layoutThis UI is the application entry point. A UI may either represent a browser window or some part of a html page where a Vaadin application is embedded. The UI is initialized using . This method is intended to be overridden to add component to the user interface and initialize non component functionality.
update drone information every secondConfiguration singleton class that stores all UI parameters
set default values for variablesConfiguration singleton class that stores all UI parameters
set default values for variablesConfiguration singleton class that stores all UI parameters
set default values for variables